// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: announcement.proto

#include "announcement.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_configuration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Configuration_configuration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_label_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Label_label_2eproto;
namespace PluginAdapter {
namespace Api {
class AnnouncementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Announcement> _instance;
} _Announcement_default_instance_;
}  // namespace Api
}  // namespace PluginAdapter
static void InitDefaultsscc_info_Announcement_announcement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::PluginAdapter::Api::_Announcement_default_instance_;
    new (ptr) ::PluginAdapter::Api::Announcement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PluginAdapter::Api::Announcement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Announcement_announcement_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Announcement_announcement_2eproto}, {
      &scc_info_Configuration_configuration_2eproto.base,
      &scc_info_Label_label_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_announcement_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_announcement_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_announcement_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_announcement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PluginAdapter::Api::Announcement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PluginAdapter::Api::Announcement, name_),
  PROTOBUF_FIELD_OFFSET(::PluginAdapter::Api::Announcement, configuration_),
  PROTOBUF_FIELD_OFFSET(::PluginAdapter::Api::Announcement, labels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PluginAdapter::Api::Announcement)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PluginAdapter::Api::_Announcement_default_instance_),
};

const char descriptor_table_protodef_announcement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022announcement.proto\022\021PluginAdapter.Api\032"
  "\023configuration.proto\032\013label.proto\"\177\n\014Ann"
  "ouncement\022\014\n\004name\030\001 \001(\t\0227\n\rconfiguration"
  "\030\002 \001(\0132 .PluginAdapter.Api.Configuration"
  "\022(\n\006labels\030\003 \003(\0132\030.PluginAdapter.Api.Lab"
  "elb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_announcement_2eproto_deps[2] = {
  &::descriptor_table_configuration_2eproto,
  &::descriptor_table_label_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_announcement_2eproto_sccs[1] = {
  &scc_info_Announcement_announcement_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_announcement_2eproto_once;
static bool descriptor_table_announcement_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_announcement_2eproto = {
  &descriptor_table_announcement_2eproto_initialized, descriptor_table_protodef_announcement_2eproto, "announcement.proto", 210,
  &descriptor_table_announcement_2eproto_once, descriptor_table_announcement_2eproto_sccs, descriptor_table_announcement_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_announcement_2eproto::offsets,
  file_level_metadata_announcement_2eproto, 1, file_level_enum_descriptors_announcement_2eproto, file_level_service_descriptors_announcement_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_announcement_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_announcement_2eproto), true);
namespace PluginAdapter {
namespace Api {

// ===================================================================

void Announcement::InitAsDefaultInstance() {
  ::PluginAdapter::Api::_Announcement_default_instance_._instance.get_mutable()->configuration_ = const_cast< ::PluginAdapter::Api::Configuration*>(
      ::PluginAdapter::Api::Configuration::internal_default_instance());
}
class Announcement::_Internal {
 public:
  static const ::PluginAdapter::Api::Configuration& configuration(const Announcement* msg);
};

const ::PluginAdapter::Api::Configuration&
Announcement::_Internal::configuration(const Announcement* msg) {
  return *msg->configuration_;
}
void Announcement::clear_configuration() {
  if (GetArenaNoVirtual() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
void Announcement::clear_labels() {
  labels_.Clear();
}
Announcement::Announcement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PluginAdapter.Api.Announcement)
}
Announcement::Announcement(const Announcement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::PluginAdapter::Api::Configuration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:PluginAdapter.Api.Announcement)
}

void Announcement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Announcement_announcement_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configuration_ = nullptr;
}

Announcement::~Announcement() {
  // @@protoc_insertion_point(destructor:PluginAdapter.Api.Announcement)
  SharedDtor();
}

void Announcement::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete configuration_;
}

void Announcement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Announcement& Announcement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Announcement_announcement_2eproto.base);
  return *internal_default_instance();
}


void Announcement::Clear() {
// @@protoc_insertion_point(message_clear_start:PluginAdapter.Api.Announcement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Announcement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "PluginAdapter.Api.Announcement.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PluginAdapter.Api.Configuration configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PluginAdapter.Api.Label labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Announcement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PluginAdapter.Api.Announcement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PluginAdapter.Api.Announcement.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .PluginAdapter.Api.Configuration configuration = 2;
  if (this->has_configuration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::configuration(this), target, stream);
  }

  // repeated .PluginAdapter.Api.Label labels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_labels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PluginAdapter.Api.Announcement)
  return target;
}

size_t Announcement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PluginAdapter.Api.Announcement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PluginAdapter.Api.Label labels = 3;
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .PluginAdapter.Api.Configuration configuration = 2;
  if (this->has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Announcement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PluginAdapter.Api.Announcement)
  GOOGLE_DCHECK_NE(&from, this);
  const Announcement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Announcement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PluginAdapter.Api.Announcement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PluginAdapter.Api.Announcement)
    MergeFrom(*source);
  }
}

void Announcement::MergeFrom(const Announcement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PluginAdapter.Api.Announcement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_configuration()) {
    _internal_mutable_configuration()->::PluginAdapter::Api::Configuration::MergeFrom(from._internal_configuration());
  }
}

void Announcement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PluginAdapter.Api.Announcement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Announcement::CopyFrom(const Announcement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PluginAdapter.Api.Announcement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Announcement::IsInitialized() const {
  return true;
}

void Announcement::InternalSwap(Announcement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(configuration_, other->configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Announcement::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Api
}  // namespace PluginAdapter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PluginAdapter::Api::Announcement* Arena::CreateMaybeMessage< ::PluginAdapter::Api::Announcement >(Arena* arena) {
  return Arena::CreateInternal< ::PluginAdapter::Api::Announcement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
