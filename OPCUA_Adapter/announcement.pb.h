// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: announcement.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_announcement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_announcement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "configuration.pb.h"
#include "label.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_announcement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_announcement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_announcement_2eproto;
namespace PluginAdapter {
namespace Api {
class Announcement;
class AnnouncementDefaultTypeInternal;
extern AnnouncementDefaultTypeInternal _Announcement_default_instance_;
}  // namespace Api
}  // namespace PluginAdapter
PROTOBUF_NAMESPACE_OPEN
template<> ::PluginAdapter::Api::Announcement* Arena::CreateMaybeMessage<::PluginAdapter::Api::Announcement>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PluginAdapter {
namespace Api {

// ===================================================================

class Announcement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PluginAdapter.Api.Announcement) */ {
 public:
  inline Announcement() : Announcement(nullptr) {}
  virtual ~Announcement();

  Announcement(const Announcement& from);
  Announcement(Announcement&& from) noexcept
    : Announcement() {
    *this = ::std::move(from);
  }

  inline Announcement& operator=(const Announcement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Announcement& operator=(Announcement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Announcement& default_instance();

  static inline const Announcement* internal_default_instance() {
    return reinterpret_cast<const Announcement*>(
               &_Announcement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Announcement& a, Announcement& b) {
    a.Swap(&b);
  }
  inline void Swap(Announcement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Announcement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Announcement* New() const final {
    return CreateMaybeMessage<Announcement>(nullptr);
  }

  Announcement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Announcement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Announcement& from);
  void MergeFrom(const Announcement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Announcement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PluginAdapter.Api.Announcement";
  }
  protected:
  explicit Announcement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_announcement_2eproto);
    return ::descriptor_table_announcement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kNameFieldNumber = 1,
    kConfigurationFieldNumber = 2,
  };
  // repeated .PluginAdapter.Api.Label labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::PluginAdapter::Api::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label >*
      mutable_labels();
  private:
  const ::PluginAdapter::Api::Label& _internal_labels(int index) const;
  ::PluginAdapter::Api::Label* _internal_add_labels();
  public:
  const ::PluginAdapter::Api::Label& labels(int index) const;
  ::PluginAdapter::Api::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label >&
      labels() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .PluginAdapter.Api.Configuration configuration = 2;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::PluginAdapter::Api::Configuration& configuration() const;
  ::PluginAdapter::Api::Configuration* release_configuration();
  ::PluginAdapter::Api::Configuration* mutable_configuration();
  void set_allocated_configuration(::PluginAdapter::Api::Configuration* configuration);
  private:
  const ::PluginAdapter::Api::Configuration& _internal_configuration() const;
  ::PluginAdapter::Api::Configuration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::PluginAdapter::Api::Configuration* configuration);
  ::PluginAdapter::Api::Configuration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:PluginAdapter.Api.Announcement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PluginAdapter::Api::Configuration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_announcement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Announcement

// string name = 1;
inline void Announcement::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Announcement::name() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Announcement.name)
  return _internal_name();
}
inline void Announcement::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Announcement.name)
}
inline std::string* Announcement::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Announcement.name)
  return _internal_mutable_name();
}
inline const std::string& Announcement::_internal_name() const {
  return name_.Get();
}
inline void Announcement::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Announcement::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PluginAdapter.Api.Announcement.name)
}
inline void Announcement::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PluginAdapter.Api.Announcement.name)
}
inline void Announcement::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PluginAdapter.Api.Announcement.name)
}
inline std::string* Announcement::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Announcement::release_name() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Announcement.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Announcement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Announcement.name)
}

// .PluginAdapter.Api.Configuration configuration = 2;
inline bool Announcement::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool Announcement::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::PluginAdapter::Api::Configuration& Announcement::_internal_configuration() const {
  const ::PluginAdapter::Api::Configuration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PluginAdapter::Api::Configuration&>(
      ::PluginAdapter::Api::_Configuration_default_instance_);
}
inline const ::PluginAdapter::Api::Configuration& Announcement::configuration() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Announcement.configuration)
  return _internal_configuration();
}
inline void Announcement::unsafe_arena_set_allocated_configuration(
    ::PluginAdapter::Api::Configuration* configuration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PluginAdapter.Api.Announcement.configuration)
}
inline ::PluginAdapter::Api::Configuration* Announcement::release_configuration() {
  
  ::PluginAdapter::Api::Configuration* temp = configuration_;
  configuration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PluginAdapter::Api::Configuration* Announcement::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Announcement.configuration)
  
  ::PluginAdapter::Api::Configuration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::PluginAdapter::Api::Configuration* Announcement::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PluginAdapter::Api::Configuration>(GetArena());
    configuration_ = p;
  }
  return configuration_;
}
inline ::PluginAdapter::Api::Configuration* Announcement::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Announcement.configuration)
  return _internal_mutable_configuration();
}
inline void Announcement::set_allocated_configuration(::PluginAdapter::Api::Configuration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration)->GetArena();
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Announcement.configuration)
}

// repeated .PluginAdapter.Api.Label labels = 3;
inline int Announcement::_internal_labels_size() const {
  return labels_.size();
}
inline int Announcement::labels_size() const {
  return _internal_labels_size();
}
inline ::PluginAdapter::Api::Label* Announcement::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Announcement.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label >*
Announcement::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:PluginAdapter.Api.Announcement.labels)
  return &labels_;
}
inline const ::PluginAdapter::Api::Label& Announcement::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::PluginAdapter::Api::Label& Announcement::labels(int index) const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Announcement.labels)
  return _internal_labels(index);
}
inline ::PluginAdapter::Api::Label* Announcement::_internal_add_labels() {
  return labels_.Add();
}
inline ::PluginAdapter::Api::Label* Announcement::add_labels() {
  // @@protoc_insertion_point(field_add:PluginAdapter.Api.Announcement.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label >&
Announcement::labels() const {
  // @@protoc_insertion_point(field_list:PluginAdapter.Api.Announcement.labels)
  return labels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Api
}  // namespace PluginAdapter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_announcement_2eproto
