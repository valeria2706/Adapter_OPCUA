// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: label.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_label_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_label_2eproto
#define NOMINMAX
#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_label_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_label_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_label_2eproto;
namespace PluginAdapter {
namespace Api {
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class Label_Parameter;
class Label_ParameterDefaultTypeInternal;
extern Label_ParameterDefaultTypeInternal _Label_Parameter_default_instance_;
class Label_Parameter_Value;
class Label_Parameter_ValueDefaultTypeInternal;
extern Label_Parameter_ValueDefaultTypeInternal _Label_Parameter_Value_default_instance_;
class Label_Parameter_Value_Array;
class Label_Parameter_Value_ArrayDefaultTypeInternal;
extern Label_Parameter_Value_ArrayDefaultTypeInternal _Label_Parameter_Value_Array_default_instance_;
class Label_Parameter_Value_Hash;
class Label_Parameter_Value_HashDefaultTypeInternal;
extern Label_Parameter_Value_HashDefaultTypeInternal _Label_Parameter_Value_Hash_default_instance_;
class Label_Parameter_Value_Hash_Entry;
class Label_Parameter_Value_Hash_EntryDefaultTypeInternal;
extern Label_Parameter_Value_Hash_EntryDefaultTypeInternal _Label_Parameter_Value_Hash_Entry_default_instance_;
}  // namespace Api
}  // namespace PluginAdapter
PROTOBUF_NAMESPACE_OPEN
template<> ::PluginAdapter::Api::Label* Arena::CreateMaybeMessage<::PluginAdapter::Api::Label>(Arena*);
template<> ::PluginAdapter::Api::Label_Parameter* Arena::CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter>(Arena*);
template<> ::PluginAdapter::Api::Label_Parameter_Value* Arena::CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter_Value>(Arena*);
template<> ::PluginAdapter::Api::Label_Parameter_Value_Array* Arena::CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter_Value_Array>(Arena*);
template<> ::PluginAdapter::Api::Label_Parameter_Value_Hash* Arena::CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter_Value_Hash>(Arena*);
template<> ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry* Arena::CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PluginAdapter {
namespace Api {

enum Label_LabelType : int {
  Label_LabelType_STIMULUS = 0,
  Label_LabelType_RESPONSE = 1,
  Label_LabelType_Label_LabelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Label_LabelType_Label_LabelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Label_LabelType_IsValid(int value);
constexpr Label_LabelType Label_LabelType_LabelType_MIN = Label_LabelType_STIMULUS;
constexpr Label_LabelType Label_LabelType_LabelType_MAX = Label_LabelType_RESPONSE;
constexpr int Label_LabelType_LabelType_ARRAYSIZE = Label_LabelType_LabelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Label_LabelType_descriptor();
template<typename T>
inline const std::string& Label_LabelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Label_LabelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Label_LabelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Label_LabelType_descriptor(), enum_t_value);
}
inline bool Label_LabelType_Parse(
    const std::string& name, Label_LabelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Label_LabelType>(
    Label_LabelType_descriptor(), name, value);
}
// ===================================================================

class Label_Parameter_Value_Array :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PluginAdapter.Api.Label.Parameter.Value.Array) */ {
 public:
  Label_Parameter_Value_Array();
  virtual ~Label_Parameter_Value_Array();

  Label_Parameter_Value_Array(const Label_Parameter_Value_Array& from);
  Label_Parameter_Value_Array(Label_Parameter_Value_Array&& from) noexcept
    : Label_Parameter_Value_Array() {
    *this = ::std::move(from);
  }

  inline Label_Parameter_Value_Array& operator=(const Label_Parameter_Value_Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label_Parameter_Value_Array& operator=(Label_Parameter_Value_Array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label_Parameter_Value_Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label_Parameter_Value_Array* internal_default_instance() {
    return reinterpret_cast<const Label_Parameter_Value_Array*>(
               &_Label_Parameter_Value_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Label_Parameter_Value_Array& a, Label_Parameter_Value_Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Label_Parameter_Value_Array* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label_Parameter_Value_Array* New() const final {
    return CreateMaybeMessage<Label_Parameter_Value_Array>(nullptr);
  }

  Label_Parameter_Value_Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label_Parameter_Value_Array>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label_Parameter_Value_Array& from);
  void MergeFrom(const Label_Parameter_Value_Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label_Parameter_Value_Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PluginAdapter.Api.Label.Parameter.Value.Array";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_label_2eproto);
    return ::descriptor_table_label_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .PluginAdapter.Api.Label.Parameter.Value values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::PluginAdapter::Api::Label_Parameter_Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value >*
      mutable_values();
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value& _internal_values(int index) const;
  ::PluginAdapter::Api::Label_Parameter_Value* _internal_add_values();
  public:
  const ::PluginAdapter::Api::Label_Parameter_Value& values(int index) const;
  ::PluginAdapter::Api::Label_Parameter_Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:PluginAdapter.Api.Label.Parameter.Value.Array)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_label_2eproto;
};
// -------------------------------------------------------------------

class Label_Parameter_Value_Hash_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry) */ {
 public:
  Label_Parameter_Value_Hash_Entry();
  virtual ~Label_Parameter_Value_Hash_Entry();

  Label_Parameter_Value_Hash_Entry(const Label_Parameter_Value_Hash_Entry& from);
  Label_Parameter_Value_Hash_Entry(Label_Parameter_Value_Hash_Entry&& from) noexcept
    : Label_Parameter_Value_Hash_Entry() {
    *this = ::std::move(from);
  }

  inline Label_Parameter_Value_Hash_Entry& operator=(const Label_Parameter_Value_Hash_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label_Parameter_Value_Hash_Entry& operator=(Label_Parameter_Value_Hash_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label_Parameter_Value_Hash_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label_Parameter_Value_Hash_Entry* internal_default_instance() {
    return reinterpret_cast<const Label_Parameter_Value_Hash_Entry*>(
               &_Label_Parameter_Value_Hash_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Label_Parameter_Value_Hash_Entry& a, Label_Parameter_Value_Hash_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Label_Parameter_Value_Hash_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label_Parameter_Value_Hash_Entry* New() const final {
    return CreateMaybeMessage<Label_Parameter_Value_Hash_Entry>(nullptr);
  }

  Label_Parameter_Value_Hash_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label_Parameter_Value_Hash_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label_Parameter_Value_Hash_Entry& from);
  void MergeFrom(const Label_Parameter_Value_Hash_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label_Parameter_Value_Hash_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PluginAdapter.Api.Label.Parameter.Value.Hash.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_label_2eproto);
    return ::descriptor_table_label_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .PluginAdapter.Api.Label.Parameter.Value key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::PluginAdapter::Api::Label_Parameter_Value& key() const;
  ::PluginAdapter::Api::Label_Parameter_Value* release_key();
  ::PluginAdapter::Api::Label_Parameter_Value* mutable_key();
  void set_allocated_key(::PluginAdapter::Api::Label_Parameter_Value* key);
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value& _internal_key() const;
  ::PluginAdapter::Api::Label_Parameter_Value* _internal_mutable_key();
  public:

  // .PluginAdapter.Api.Label.Parameter.Value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PluginAdapter::Api::Label_Parameter_Value& value() const;
  ::PluginAdapter::Api::Label_Parameter_Value* release_value();
  ::PluginAdapter::Api::Label_Parameter_Value* mutable_value();
  void set_allocated_value(::PluginAdapter::Api::Label_Parameter_Value* value);
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value& _internal_value() const;
  ::PluginAdapter::Api::Label_Parameter_Value* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PluginAdapter::Api::Label_Parameter_Value* key_;
  ::PluginAdapter::Api::Label_Parameter_Value* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_label_2eproto;
};
// -------------------------------------------------------------------

class Label_Parameter_Value_Hash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PluginAdapter.Api.Label.Parameter.Value.Hash) */ {
 public:
  Label_Parameter_Value_Hash();
  virtual ~Label_Parameter_Value_Hash();

  Label_Parameter_Value_Hash(const Label_Parameter_Value_Hash& from);
  Label_Parameter_Value_Hash(Label_Parameter_Value_Hash&& from) noexcept
    : Label_Parameter_Value_Hash() {
    *this = ::std::move(from);
  }

  inline Label_Parameter_Value_Hash& operator=(const Label_Parameter_Value_Hash& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label_Parameter_Value_Hash& operator=(Label_Parameter_Value_Hash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label_Parameter_Value_Hash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label_Parameter_Value_Hash* internal_default_instance() {
    return reinterpret_cast<const Label_Parameter_Value_Hash*>(
               &_Label_Parameter_Value_Hash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Label_Parameter_Value_Hash& a, Label_Parameter_Value_Hash& b) {
    a.Swap(&b);
  }
  inline void Swap(Label_Parameter_Value_Hash* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label_Parameter_Value_Hash* New() const final {
    return CreateMaybeMessage<Label_Parameter_Value_Hash>(nullptr);
  }

  Label_Parameter_Value_Hash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label_Parameter_Value_Hash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label_Parameter_Value_Hash& from);
  void MergeFrom(const Label_Parameter_Value_Hash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label_Parameter_Value_Hash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PluginAdapter.Api.Label.Parameter.Value.Hash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_label_2eproto);
    return ::descriptor_table_label_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Label_Parameter_Value_Hash_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .PluginAdapter.Api.Label.Parameter.Value.Hash.Entry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry >*
      mutable_entries();
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry& _internal_entries(int index) const;
  ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry* _internal_add_entries();
  public:
  const ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry& entries(int index) const;
  ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:PluginAdapter.Api.Label.Parameter.Value.Hash)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_label_2eproto;
};
// -------------------------------------------------------------------

class Label_Parameter_Value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PluginAdapter.Api.Label.Parameter.Value) */ {
 public:
  Label_Parameter_Value();
  virtual ~Label_Parameter_Value();

  Label_Parameter_Value(const Label_Parameter_Value& from);
  Label_Parameter_Value(Label_Parameter_Value&& from) noexcept
    : Label_Parameter_Value() {
    *this = ::std::move(from);
  }

  inline Label_Parameter_Value& operator=(const Label_Parameter_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label_Parameter_Value& operator=(Label_Parameter_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label_Parameter_Value& default_instance();

  enum TypeCase {
    kString = 1,
    kInteger = 2,
    kDecimal = 3,
    kBoolean = 4,
    kDate = 5,
    kArray = 6,
    kStruct = 7,
    kHashValue = 8,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label_Parameter_Value* internal_default_instance() {
    return reinterpret_cast<const Label_Parameter_Value*>(
               &_Label_Parameter_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Label_Parameter_Value& a, Label_Parameter_Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Label_Parameter_Value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label_Parameter_Value* New() const final {
    return CreateMaybeMessage<Label_Parameter_Value>(nullptr);
  }

  Label_Parameter_Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label_Parameter_Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label_Parameter_Value& from);
  void MergeFrom(const Label_Parameter_Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label_Parameter_Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PluginAdapter.Api.Label.Parameter.Value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_label_2eproto);
    return ::descriptor_table_label_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Label_Parameter_Value_Array Array;
  typedef Label_Parameter_Value_Hash Hash;

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 1,
    kIntegerFieldNumber = 2,
    kDecimalFieldNumber = 3,
    kBooleanFieldNumber = 4,
    kDateFieldNumber = 5,
    kArrayFieldNumber = 6,
    kStructFieldNumber = 7,
    kHashValueFieldNumber = 8,
  };
  // string string = 1;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // int64 integer = 2;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  ::PROTOBUF_NAMESPACE_ID::int64 integer() const;
  void set_integer(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_integer() const;
  void _internal_set_integer(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double decimal = 3;
  private:
  bool _internal_has_decimal() const;
  public:
  void clear_decimal();
  double decimal() const;
  void set_decimal(double value);
  private:
  double _internal_decimal() const;
  void _internal_set_decimal(double value);
  public:

  // bool boolean = 4;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  bool boolean() const;
  void set_boolean(bool value);
  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);
  public:

  // uint64 date = 5;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  ::PROTOBUF_NAMESPACE_ID::uint64 date() const;
  void set_date(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_date() const;
  void _internal_set_date(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .PluginAdapter.Api.Label.Parameter.Value.Array array = 6;
  bool has_array() const;
  private:
  bool _internal_has_array() const;
  public:
  void clear_array();
  const ::PluginAdapter::Api::Label_Parameter_Value_Array& array() const;
  ::PluginAdapter::Api::Label_Parameter_Value_Array* release_array();
  ::PluginAdapter::Api::Label_Parameter_Value_Array* mutable_array();
  void set_allocated_array(::PluginAdapter::Api::Label_Parameter_Value_Array* array);
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value_Array& _internal_array() const;
  ::PluginAdapter::Api::Label_Parameter_Value_Array* _internal_mutable_array();
  public:

  // .PluginAdapter.Api.Label.Parameter.Value.Hash struct = 7;
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;
  public:
  void clear_struct_();
  const ::PluginAdapter::Api::Label_Parameter_Value_Hash& struct_() const;
  ::PluginAdapter::Api::Label_Parameter_Value_Hash* release_struct_();
  ::PluginAdapter::Api::Label_Parameter_Value_Hash* mutable_struct_();
  void set_allocated_struct_(::PluginAdapter::Api::Label_Parameter_Value_Hash* struct_);
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value_Hash& _internal_struct_() const;
  ::PluginAdapter::Api::Label_Parameter_Value_Hash* _internal_mutable_struct_();
  public:

  // .PluginAdapter.Api.Label.Parameter.Value.Hash hash_value = 8;
  bool has_hash_value() const;
  private:
  bool _internal_has_hash_value() const;
  public:
  void clear_hash_value();
  const ::PluginAdapter::Api::Label_Parameter_Value_Hash& hash_value() const;
  ::PluginAdapter::Api::Label_Parameter_Value_Hash* release_hash_value();
  ::PluginAdapter::Api::Label_Parameter_Value_Hash* mutable_hash_value();
  void set_allocated_hash_value(::PluginAdapter::Api::Label_Parameter_Value_Hash* hash_value);
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value_Hash& _internal_hash_value() const;
  ::PluginAdapter::Api::Label_Parameter_Value_Hash* _internal_mutable_hash_value();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:PluginAdapter.Api.Label.Parameter.Value)
 private:
  class _Internal;
  void set_has_string();
  void set_has_integer();
  void set_has_decimal();
  void set_has_boolean();
  void set_has_date();
  void set_has_array();
  void set_has_struct_();
  void set_has_hash_value();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::int64 integer_;
    double decimal_;
    bool boolean_;
    ::PROTOBUF_NAMESPACE_ID::uint64 date_;
    ::PluginAdapter::Api::Label_Parameter_Value_Array* array_;
    ::PluginAdapter::Api::Label_Parameter_Value_Hash* struct__;
    ::PluginAdapter::Api::Label_Parameter_Value_Hash* hash_value_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_label_2eproto;
};
// -------------------------------------------------------------------

class Label_Parameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PluginAdapter.Api.Label.Parameter) */ {
 public:
  Label_Parameter();
  virtual ~Label_Parameter();

  Label_Parameter(const Label_Parameter& from);
  Label_Parameter(Label_Parameter&& from) noexcept
    : Label_Parameter() {
    *this = ::std::move(from);
  }

  inline Label_Parameter& operator=(const Label_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label_Parameter& operator=(Label_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label_Parameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label_Parameter* internal_default_instance() {
    return reinterpret_cast<const Label_Parameter*>(
               &_Label_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Label_Parameter& a, Label_Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Label_Parameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label_Parameter* New() const final {
    return CreateMaybeMessage<Label_Parameter>(nullptr);
  }

  Label_Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label_Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label_Parameter& from);
  void MergeFrom(const Label_Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label_Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PluginAdapter.Api.Label.Parameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_label_2eproto);
    return ::descriptor_table_label_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Label_Parameter_Value Value;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .PluginAdapter.Api.Label.Parameter.Value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PluginAdapter::Api::Label_Parameter_Value& value() const;
  ::PluginAdapter::Api::Label_Parameter_Value* release_value();
  ::PluginAdapter::Api::Label_Parameter_Value* mutable_value();
  void set_allocated_value(::PluginAdapter::Api::Label_Parameter_Value* value);
  private:
  const ::PluginAdapter::Api::Label_Parameter_Value& _internal_value() const;
  ::PluginAdapter::Api::Label_Parameter_Value* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:PluginAdapter.Api.Label.Parameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PluginAdapter::Api::Label_Parameter_Value* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_label_2eproto;
};
// -------------------------------------------------------------------

class Label :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PluginAdapter.Api.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PluginAdapter.Api.Label";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_label_2eproto);
    return ::descriptor_table_label_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Label_Parameter Parameter;

  typedef Label_LabelType LabelType;
  static constexpr LabelType STIMULUS =
    Label_LabelType_STIMULUS;
  static constexpr LabelType RESPONSE =
    Label_LabelType_RESPONSE;
  static inline bool LabelType_IsValid(int value) {
    return Label_LabelType_IsValid(value);
  }
  static constexpr LabelType LabelType_MIN =
    Label_LabelType_LabelType_MIN;
  static constexpr LabelType LabelType_MAX =
    Label_LabelType_LabelType_MAX;
  static constexpr int LabelType_ARRAYSIZE =
    Label_LabelType_LabelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LabelType_descriptor() {
    return Label_LabelType_descriptor();
  }
  template<typename T>
  static inline const std::string& LabelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LabelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LabelType_Name.");
    return Label_LabelType_Name(enum_t_value);
  }
  static inline bool LabelType_Parse(const std::string& name,
      LabelType* value) {
    return Label_LabelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 4,
    kLabelFieldNumber = 2,
    kChannelFieldNumber = 3,
    kPhysicalLabelFieldNumber = 6,
    kTimestampFieldNumber = 5,
    kCorrelationIdFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // repeated .PluginAdapter.Api.Label.Parameter parameters = 4;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::PluginAdapter::Api::Label_Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter >*
      mutable_parameters();
  private:
  const ::PluginAdapter::Api::Label_Parameter& _internal_parameters(int index) const;
  ::PluginAdapter::Api::Label_Parameter* _internal_add_parameters();
  public:
  const ::PluginAdapter::Api::Label_Parameter& parameters(int index) const;
  ::PluginAdapter::Api::Label_Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter >&
      parameters() const;

  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string channel = 3;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // bytes physical_label = 6;
  void clear_physical_label();
  const std::string& physical_label() const;
  void set_physical_label(const std::string& value);
  void set_physical_label(std::string&& value);
  void set_physical_label(const char* value);
  void set_physical_label(const void* value, size_t size);
  std::string* mutable_physical_label();
  std::string* release_physical_label();
  void set_allocated_physical_label(std::string* physical_label);
  private:
  const std::string& _internal_physical_label() const;
  void _internal_set_physical_label(const std::string& value);
  std::string* _internal_mutable_physical_label();
  public:

  // uint64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 correlation_id = 7;
  void clear_correlation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 correlation_id() const;
  void set_correlation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_correlation_id() const;
  void _internal_set_correlation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .PluginAdapter.Api.Label.LabelType type = 1;
  void clear_type();
  ::PluginAdapter::Api::Label_LabelType type() const;
  void set_type(::PluginAdapter::Api::Label_LabelType value);
  private:
  ::PluginAdapter::Api::Label_LabelType _internal_type() const;
  void _internal_set_type(::PluginAdapter::Api::Label_LabelType value);
  public:

  // @@protoc_insertion_point(class_scope:PluginAdapter.Api.Label)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr physical_label_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 correlation_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_label_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Label_Parameter_Value_Array

// repeated .PluginAdapter.Api.Label.Parameter.Value values = 1;
inline int Label_Parameter_Value_Array::_internal_values_size() const {
  return values_.size();
}
inline int Label_Parameter_Value_Array::values_size() const {
  return _internal_values_size();
}
inline void Label_Parameter_Value_Array::clear_values() {
  values_.Clear();
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Array::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.Array.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value >*
Label_Parameter_Value_Array::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:PluginAdapter.Api.Label.Parameter.Value.Array.values)
  return &values_;
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter_Value_Array::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter_Value_Array::values(int index) const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.Array.values)
  return _internal_values(index);
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Array::_internal_add_values() {
  return values_.Add();
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Array::add_values() {
  // @@protoc_insertion_point(field_add:PluginAdapter.Api.Label.Parameter.Value.Array.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value >&
Label_Parameter_Value_Array::values() const {
  // @@protoc_insertion_point(field_list:PluginAdapter.Api.Label.Parameter.Value.Array.values)
  return values_;
}

// -------------------------------------------------------------------

// Label_Parameter_Value_Hash_Entry

// .PluginAdapter.Api.Label.Parameter.Value key = 1;
inline bool Label_Parameter_Value_Hash_Entry::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool Label_Parameter_Value_Hash_Entry::has_key() const {
  return _internal_has_key();
}
inline void Label_Parameter_Value_Hash_Entry::clear_key() {
  if (GetArenaNoVirtual() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter_Value_Hash_Entry::_internal_key() const {
  const ::PluginAdapter::Api::Label_Parameter_Value* p = key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PluginAdapter::Api::Label_Parameter_Value*>(
      &::PluginAdapter::Api::_Label_Parameter_Value_default_instance_);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter_Value_Hash_Entry::key() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.key)
  return _internal_key();
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Hash_Entry::release_key() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.key)
  
  ::PluginAdapter::Api::Label_Parameter_Value* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Hash_Entry::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter_Value>(GetArenaNoVirtual());
    key_ = p;
  }
  return key_;
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Hash_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.key)
  return _internal_mutable_key();
}
inline void Label_Parameter_Value_Hash_Entry::set_allocated_key(::PluginAdapter::Api::Label_Parameter_Value* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.key)
}

// .PluginAdapter.Api.Label.Parameter.Value value = 2;
inline bool Label_Parameter_Value_Hash_Entry::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Label_Parameter_Value_Hash_Entry::has_value() const {
  return _internal_has_value();
}
inline void Label_Parameter_Value_Hash_Entry::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter_Value_Hash_Entry::_internal_value() const {
  const ::PluginAdapter::Api::Label_Parameter_Value* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PluginAdapter::Api::Label_Parameter_Value*>(
      &::PluginAdapter::Api::_Label_Parameter_Value_default_instance_);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter_Value_Hash_Entry::value() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.value)
  return _internal_value();
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Hash_Entry::release_value() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.value)
  
  ::PluginAdapter::Api::Label_Parameter_Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Hash_Entry::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter_Value_Hash_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.value)
  return _internal_mutable_value();
}
inline void Label_Parameter_Value_Hash_Entry::set_allocated_value(::PluginAdapter::Api::Label_Parameter_Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.Parameter.Value.Hash.Entry.value)
}

// -------------------------------------------------------------------

// Label_Parameter_Value_Hash

// repeated .PluginAdapter.Api.Label.Parameter.Value.Hash.Entry entries = 1;
inline int Label_Parameter_Value_Hash::_internal_entries_size() const {
  return entries_.size();
}
inline int Label_Parameter_Value_Hash::entries_size() const {
  return _internal_entries_size();
}
inline void Label_Parameter_Value_Hash::clear_entries() {
  entries_.Clear();
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry* Label_Parameter_Value_Hash::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.Hash.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry >*
Label_Parameter_Value_Hash::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:PluginAdapter.Api.Label.Parameter.Value.Hash.entries)
  return &entries_;
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry& Label_Parameter_Value_Hash::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry& Label_Parameter_Value_Hash::entries(int index) const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.Hash.entries)
  return _internal_entries(index);
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry* Label_Parameter_Value_Hash::_internal_add_entries() {
  return entries_.Add();
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry* Label_Parameter_Value_Hash::add_entries() {
  // @@protoc_insertion_point(field_add:PluginAdapter.Api.Label.Parameter.Value.Hash.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter_Value_Hash_Entry >&
Label_Parameter_Value_Hash::entries() const {
  // @@protoc_insertion_point(field_list:PluginAdapter.Api.Label.Parameter.Value.Hash.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Label_Parameter_Value

// string string = 1;
inline bool Label_Parameter_Value::_internal_has_string() const {
  return type_case() == kString;
}
inline void Label_Parameter_Value::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Label_Parameter_Value::clear_string() {
  if (_internal_has_string()) {
    type_.string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const std::string& Label_Parameter_Value::string() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.string)
  return _internal_string();
}
inline void Label_Parameter_Value::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.Parameter.Value.string)
}
inline std::string* Label_Parameter_Value::mutable_string() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.string)
  return _internal_mutable_string();
}
inline const std::string& Label_Parameter_Value::_internal_string() const {
  if (_internal_has_string()) {
    return type_.string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Label_Parameter_Value::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Label_Parameter_Value::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.Parameter.Value.string)
  if (!_internal_has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PluginAdapter.Api.Label.Parameter.Value.string)
}
inline void Label_Parameter_Value::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PluginAdapter.Api.Label.Parameter.Value.string)
}
inline void Label_Parameter_Value::set_string(const char* value, size_t size) {
  if (!_internal_has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PluginAdapter.Api.Label.Parameter.Value.string)
}
inline std::string* Label_Parameter_Value::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Label_Parameter_Value::release_string() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.Value.string)
  if (_internal_has_string()) {
    clear_has_type();
    return type_.string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Label_Parameter_Value::set_allocated_string(std::string* string) {
  if (has_type()) {
    clear_type();
  }
  if (string != nullptr) {
    set_has_string();
    type_.string_.UnsafeSetDefault(string);
  }
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.Parameter.Value.string)
}

// int64 integer = 2;
inline bool Label_Parameter_Value::_internal_has_integer() const {
  return type_case() == kInteger;
}
inline void Label_Parameter_Value::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Label_Parameter_Value::clear_integer() {
  if (_internal_has_integer()) {
    type_.integer_ = PROTOBUF_LONGLONG(0);
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Label_Parameter_Value::_internal_integer() const {
  if (_internal_has_integer()) {
    return type_.integer_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Label_Parameter_Value::_internal_set_integer(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_integer()) {
    clear_type();
    set_has_integer();
  }
  type_.integer_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Label_Parameter_Value::integer() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.integer)
  return _internal_integer();
}
inline void Label_Parameter_Value::set_integer(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_integer(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.Parameter.Value.integer)
}

// double decimal = 3;
inline bool Label_Parameter_Value::_internal_has_decimal() const {
  return type_case() == kDecimal;
}
inline void Label_Parameter_Value::set_has_decimal() {
  _oneof_case_[0] = kDecimal;
}
inline void Label_Parameter_Value::clear_decimal() {
  if (_internal_has_decimal()) {
    type_.decimal_ = 0;
    clear_has_type();
  }
}
inline double Label_Parameter_Value::_internal_decimal() const {
  if (_internal_has_decimal()) {
    return type_.decimal_;
  }
  return 0;
}
inline void Label_Parameter_Value::_internal_set_decimal(double value) {
  if (!_internal_has_decimal()) {
    clear_type();
    set_has_decimal();
  }
  type_.decimal_ = value;
}
inline double Label_Parameter_Value::decimal() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.decimal)
  return _internal_decimal();
}
inline void Label_Parameter_Value::set_decimal(double value) {
  _internal_set_decimal(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.Parameter.Value.decimal)
}

// bool boolean = 4;
inline bool Label_Parameter_Value::_internal_has_boolean() const {
  return type_case() == kBoolean;
}
inline void Label_Parameter_Value::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void Label_Parameter_Value::clear_boolean() {
  if (_internal_has_boolean()) {
    type_.boolean_ = false;
    clear_has_type();
  }
}
inline bool Label_Parameter_Value::_internal_boolean() const {
  if (_internal_has_boolean()) {
    return type_.boolean_;
  }
  return false;
}
inline void Label_Parameter_Value::_internal_set_boolean(bool value) {
  if (!_internal_has_boolean()) {
    clear_type();
    set_has_boolean();
  }
  type_.boolean_ = value;
}
inline bool Label_Parameter_Value::boolean() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.boolean)
  return _internal_boolean();
}
inline void Label_Parameter_Value::set_boolean(bool value) {
  _internal_set_boolean(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.Parameter.Value.boolean)
}

// uint64 date = 5;
inline bool Label_Parameter_Value::_internal_has_date() const {
  return type_case() == kDate;
}
inline void Label_Parameter_Value::set_has_date() {
  _oneof_case_[0] = kDate;
}
inline void Label_Parameter_Value::clear_date() {
  if (_internal_has_date()) {
    type_.date_ = PROTOBUF_ULONGLONG(0);
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Label_Parameter_Value::_internal_date() const {
  if (_internal_has_date()) {
    return type_.date_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Label_Parameter_Value::_internal_set_date(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_date()) {
    clear_type();
    set_has_date();
  }
  type_.date_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Label_Parameter_Value::date() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.date)
  return _internal_date();
}
inline void Label_Parameter_Value::set_date(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.Parameter.Value.date)
}

// .PluginAdapter.Api.Label.Parameter.Value.Array array = 6;
inline bool Label_Parameter_Value::_internal_has_array() const {
  return type_case() == kArray;
}
inline bool Label_Parameter_Value::has_array() const {
  return _internal_has_array();
}
inline void Label_Parameter_Value::set_has_array() {
  _oneof_case_[0] = kArray;
}
inline void Label_Parameter_Value::clear_array() {
  if (_internal_has_array()) {
    delete type_.array_;
    clear_has_type();
  }
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Array* Label_Parameter_Value::release_array() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.Value.array)
  if (has_array()) {
    clear_has_type();
      ::PluginAdapter::Api::Label_Parameter_Value_Array* temp = type_.array_;
    type_.array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Array& Label_Parameter_Value::_internal_array() const {
  return _internal_has_array()
      ? *type_.array_
      : *reinterpret_cast< ::PluginAdapter::Api::Label_Parameter_Value_Array*>(&::PluginAdapter::Api::_Label_Parameter_Value_Array_default_instance_);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Array& Label_Parameter_Value::array() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.array)
  return _internal_array();
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Array* Label_Parameter_Value::_internal_mutable_array() {
  if (!_internal_has_array()) {
    clear_type();
    set_has_array();
    type_.array_ = CreateMaybeMessage< ::PluginAdapter::Api::Label_Parameter_Value_Array >(
        GetArenaNoVirtual());
  }
  return type_.array_;
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Array* Label_Parameter_Value::mutable_array() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.array)
  return _internal_mutable_array();
}

// .PluginAdapter.Api.Label.Parameter.Value.Hash struct = 7;
inline bool Label_Parameter_Value::_internal_has_struct_() const {
  return type_case() == kStruct;
}
inline bool Label_Parameter_Value::has_struct_() const {
  return _internal_has_struct_();
}
inline void Label_Parameter_Value::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline void Label_Parameter_Value::clear_struct_() {
  if (_internal_has_struct_()) {
    delete type_.struct__;
    clear_has_type();
  }
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash* Label_Parameter_Value::release_struct_() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.Value.struct)
  if (has_struct_()) {
    clear_has_type();
      ::PluginAdapter::Api::Label_Parameter_Value_Hash* temp = type_.struct__;
    type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Hash& Label_Parameter_Value::_internal_struct_() const {
  return _internal_has_struct_()
      ? *type_.struct__
      : *reinterpret_cast< ::PluginAdapter::Api::Label_Parameter_Value_Hash*>(&::PluginAdapter::Api::_Label_Parameter_Value_Hash_default_instance_);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Hash& Label_Parameter_Value::struct_() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.struct)
  return _internal_struct_();
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash* Label_Parameter_Value::_internal_mutable_struct_() {
  if (!_internal_has_struct_()) {
    clear_type();
    set_has_struct_();
    type_.struct__ = CreateMaybeMessage< ::PluginAdapter::Api::Label_Parameter_Value_Hash >(
        GetArenaNoVirtual());
  }
  return type_.struct__;
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash* Label_Parameter_Value::mutable_struct_() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.struct)
  return _internal_mutable_struct_();
}

// .PluginAdapter.Api.Label.Parameter.Value.Hash hash_value = 8;
inline bool Label_Parameter_Value::_internal_has_hash_value() const {
  return type_case() == kHashValue;
}
inline bool Label_Parameter_Value::has_hash_value() const {
  return _internal_has_hash_value();
}
inline void Label_Parameter_Value::set_has_hash_value() {
  _oneof_case_[0] = kHashValue;
}
inline void Label_Parameter_Value::clear_hash_value() {
  if (_internal_has_hash_value()) {
    delete type_.hash_value_;
    clear_has_type();
  }
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash* Label_Parameter_Value::release_hash_value() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.Value.hash_value)
  if (has_hash_value()) {
    clear_has_type();
      ::PluginAdapter::Api::Label_Parameter_Value_Hash* temp = type_.hash_value_;
    type_.hash_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Hash& Label_Parameter_Value::_internal_hash_value() const {
  return _internal_has_hash_value()
      ? *type_.hash_value_
      : *reinterpret_cast< ::PluginAdapter::Api::Label_Parameter_Value_Hash*>(&::PluginAdapter::Api::_Label_Parameter_Value_Hash_default_instance_);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value_Hash& Label_Parameter_Value::hash_value() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.Value.hash_value)
  return _internal_hash_value();
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash* Label_Parameter_Value::_internal_mutable_hash_value() {
  if (!_internal_has_hash_value()) {
    clear_type();
    set_has_hash_value();
    type_.hash_value_ = CreateMaybeMessage< ::PluginAdapter::Api::Label_Parameter_Value_Hash >(
        GetArenaNoVirtual());
  }
  return type_.hash_value_;
}
inline ::PluginAdapter::Api::Label_Parameter_Value_Hash* Label_Parameter_Value::mutable_hash_value() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.Value.hash_value)
  return _internal_mutable_hash_value();
}

inline bool Label_Parameter_Value::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Label_Parameter_Value::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Label_Parameter_Value::TypeCase Label_Parameter_Value::type_case() const {
  return Label_Parameter_Value::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Label_Parameter

// string name = 1;
inline void Label_Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Label_Parameter::name() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.name)
  return _internal_name();
}
inline void Label_Parameter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.Parameter.name)
}
inline std::string* Label_Parameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.name)
  return _internal_mutable_name();
}
inline const std::string& Label_Parameter::_internal_name() const {
  return name_.GetNoArena();
}
inline void Label_Parameter::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Label_Parameter::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PluginAdapter.Api.Label.Parameter.name)
}
inline void Label_Parameter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PluginAdapter.Api.Label.Parameter.name)
}
inline void Label_Parameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PluginAdapter.Api.Label.Parameter.name)
}
inline std::string* Label_Parameter::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Label_Parameter::release_name() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Label_Parameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.Parameter.name)
}

// .PluginAdapter.Api.Label.Parameter.Value value = 2;
inline bool Label_Parameter::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Label_Parameter::has_value() const {
  return _internal_has_value();
}
inline void Label_Parameter::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter::_internal_value() const {
  const ::PluginAdapter::Api::Label_Parameter_Value* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PluginAdapter::Api::Label_Parameter_Value*>(
      &::PluginAdapter::Api::_Label_Parameter_Value_default_instance_);
}
inline const ::PluginAdapter::Api::Label_Parameter_Value& Label_Parameter::value() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.Parameter.value)
  return _internal_value();
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter::release_value() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.Parameter.value)
  
  ::PluginAdapter::Api::Label_Parameter_Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PluginAdapter::Api::Label_Parameter_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::PluginAdapter::Api::Label_Parameter_Value* Label_Parameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.Parameter.value)
  return _internal_mutable_value();
}
inline void Label_Parameter::set_allocated_value(::PluginAdapter::Api::Label_Parameter_Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.Parameter.value)
}

// -------------------------------------------------------------------

// Label

// .PluginAdapter.Api.Label.LabelType type = 1;
inline void Label::clear_type() {
  type_ = 0;
}
inline ::PluginAdapter::Api::Label_LabelType Label::_internal_type() const {
  return static_cast< ::PluginAdapter::Api::Label_LabelType >(type_);
}
inline ::PluginAdapter::Api::Label_LabelType Label::type() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.type)
  return _internal_type();
}
inline void Label::_internal_set_type(::PluginAdapter::Api::Label_LabelType value) {
  
  type_ = value;
}
inline void Label::set_type(::PluginAdapter::Api::Label_LabelType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.type)
}

// string label = 2;
inline void Label::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Label::label() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.label)
  return _internal_label();
}
inline void Label::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.label)
}
inline std::string* Label::mutable_label() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.label)
  return _internal_mutable_label();
}
inline const std::string& Label::_internal_label() const {
  return label_.GetNoArena();
}
inline void Label::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Label::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PluginAdapter.Api.Label.label)
}
inline void Label::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PluginAdapter.Api.Label.label)
}
inline void Label::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PluginAdapter.Api.Label.label)
}
inline std::string* Label::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Label::release_label() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.label)
}

// string channel = 3;
inline void Label::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Label::channel() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.channel)
  return _internal_channel();
}
inline void Label::set_channel(const std::string& value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.channel)
}
inline std::string* Label::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.channel)
  return _internal_mutable_channel();
}
inline const std::string& Label::_internal_channel() const {
  return channel_.GetNoArena();
}
inline void Label::_internal_set_channel(const std::string& value) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Label::set_channel(std::string&& value) {
  
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PluginAdapter.Api.Label.channel)
}
inline void Label::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PluginAdapter.Api.Label.channel)
}
inline void Label::set_channel(const char* value, size_t size) {
  
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PluginAdapter.Api.Label.channel)
}
inline std::string* Label::_internal_mutable_channel() {
  
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Label::release_channel() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.channel)
  
  return channel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    
  } else {
    
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.channel)
}

// repeated .PluginAdapter.Api.Label.Parameter parameters = 4;
inline int Label::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Label::parameters_size() const {
  return _internal_parameters_size();
}
inline void Label::clear_parameters() {
  parameters_.Clear();
}
inline ::PluginAdapter::Api::Label_Parameter* Label::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter >*
Label::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:PluginAdapter.Api.Label.parameters)
  return &parameters_;
}
inline const ::PluginAdapter::Api::Label_Parameter& Label::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::PluginAdapter::Api::Label_Parameter& Label::parameters(int index) const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.parameters)
  return _internal_parameters(index);
}
inline ::PluginAdapter::Api::Label_Parameter* Label::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::PluginAdapter::Api::Label_Parameter* Label::add_parameters() {
  // @@protoc_insertion_point(field_add:PluginAdapter.Api.Label.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PluginAdapter::Api::Label_Parameter >&
Label::parameters() const {
  // @@protoc_insertion_point(field_list:PluginAdapter.Api.Label.parameters)
  return parameters_;
}

// uint64 timestamp = 5;
inline void Label::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Label::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Label::timestamp() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.timestamp)
  return _internal_timestamp();
}
inline void Label::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Label::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.timestamp)
}

// bytes physical_label = 6;
inline void Label::clear_physical_label() {
  physical_label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Label::physical_label() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.physical_label)
  return _internal_physical_label();
}
inline void Label::set_physical_label(const std::string& value) {
  _internal_set_physical_label(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.physical_label)
}
inline std::string* Label::mutable_physical_label() {
  // @@protoc_insertion_point(field_mutable:PluginAdapter.Api.Label.physical_label)
  return _internal_mutable_physical_label();
}
inline const std::string& Label::_internal_physical_label() const {
  return physical_label_.GetNoArena();
}
inline void Label::_internal_set_physical_label(const std::string& value) {
  
  physical_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Label::set_physical_label(std::string&& value) {
  
  physical_label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PluginAdapter.Api.Label.physical_label)
}
inline void Label::set_physical_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  physical_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PluginAdapter.Api.Label.physical_label)
}
inline void Label::set_physical_label(const void* value, size_t size) {
  
  physical_label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PluginAdapter.Api.Label.physical_label)
}
inline std::string* Label::_internal_mutable_physical_label() {
  
  return physical_label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Label::release_physical_label() {
  // @@protoc_insertion_point(field_release:PluginAdapter.Api.Label.physical_label)
  
  return physical_label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Label::set_allocated_physical_label(std::string* physical_label) {
  if (physical_label != nullptr) {
    
  } else {
    
  }
  physical_label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), physical_label);
  // @@protoc_insertion_point(field_set_allocated:PluginAdapter.Api.Label.physical_label)
}

// uint64 correlation_id = 7;
inline void Label::clear_correlation_id() {
  correlation_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Label::_internal_correlation_id() const {
  return correlation_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Label::correlation_id() const {
  // @@protoc_insertion_point(field_get:PluginAdapter.Api.Label.correlation_id)
  return _internal_correlation_id();
}
inline void Label::_internal_set_correlation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  correlation_id_ = value;
}
inline void Label::set_correlation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:PluginAdapter.Api.Label.correlation_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Api
}  // namespace PluginAdapter

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PluginAdapter::Api::Label_LabelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PluginAdapter::Api::Label_LabelType>() {
  return ::PluginAdapter::Api::Label_LabelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_label_2eproto
